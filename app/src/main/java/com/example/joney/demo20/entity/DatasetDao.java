package com.example.joney.demo20.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATASET".
*/
public class DatasetDao extends AbstractDao<Dataset, Long> {

    public static final String TABLENAME = "DATASET";

    /**
     * Properties of entity Dataset.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MeasureId = new Property(0, Long.class, "measureId", true, "_id");
        public final static Property Time = new Property(1, String.class, "Time", false, "TIME");
        public final static Property NAME = new Property(2, String.class, "NAME", false, "NAME");
        public final static Property VIS = new Property(3, String.class, "VIS", false, "VIS");
        public final static Property TEM = new Property(4, String.class, "TEM", false, "TEM");
        public final static Property TOR = new Property(5, String.class, "TOR", false, "TOR");
        public final static Property Vlo = new Property(6, String.class, "Vlo", false, "VLO");
        public final static Property Spi = new Property(7, String.class, "Spi", false, "SPI");
    }


    public DatasetDao(DaoConfig config) {
        super(config);
    }
    
    public DatasetDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATASET\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: measureId
                "\"TIME\" TEXT," + // 1: Time
                "\"NAME\" TEXT," + // 2: NAME
                "\"VIS\" TEXT," + // 3: VIS
                "\"TEM\" TEXT," + // 4: TEM
                "\"TOR\" TEXT," + // 5: TOR
                "\"VLO\" TEXT," + // 6: Vlo
                "\"SPI\" TEXT);"); // 7: Spi
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_DATASET_TIME ON \"DATASET\"" +
                " (\"TIME\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATASET\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Dataset entity) {
        stmt.clearBindings();
 
        Long measureId = entity.getMeasureId();
        if (measureId != null) {
            stmt.bindLong(1, measureId);
        }
 
        String Time = entity.getTime();
        if (Time != null) {
            stmt.bindString(2, Time);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(3, NAME);
        }
 
        String VIS = entity.getVIS();
        if (VIS != null) {
            stmt.bindString(4, VIS);
        }
 
        String TEM = entity.getTEM();
        if (TEM != null) {
            stmt.bindString(5, TEM);
        }
 
        String TOR = entity.getTOR();
        if (TOR != null) {
            stmt.bindString(6, TOR);
        }
 
        String Vlo = entity.getVlo();
        if (Vlo != null) {
            stmt.bindString(7, Vlo);
        }
 
        String Spi = entity.getSpi();
        if (Spi != null) {
            stmt.bindString(8, Spi);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Dataset entity) {
        stmt.clearBindings();
 
        Long measureId = entity.getMeasureId();
        if (measureId != null) {
            stmt.bindLong(1, measureId);
        }
 
        String Time = entity.getTime();
        if (Time != null) {
            stmt.bindString(2, Time);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(3, NAME);
        }
 
        String VIS = entity.getVIS();
        if (VIS != null) {
            stmt.bindString(4, VIS);
        }
 
        String TEM = entity.getTEM();
        if (TEM != null) {
            stmt.bindString(5, TEM);
        }
 
        String TOR = entity.getTOR();
        if (TOR != null) {
            stmt.bindString(6, TOR);
        }
 
        String Vlo = entity.getVlo();
        if (Vlo != null) {
            stmt.bindString(7, Vlo);
        }
 
        String Spi = entity.getSpi();
        if (Spi != null) {
            stmt.bindString(8, Spi);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Dataset readEntity(Cursor cursor, int offset) {
        Dataset entity = new Dataset( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // measureId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Time
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // NAME
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // VIS
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // TEM
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // TOR
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Vlo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // Spi
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Dataset entity, int offset) {
        entity.setMeasureId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNAME(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVIS(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTEM(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTOR(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVlo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSpi(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Dataset entity, long rowId) {
        entity.setMeasureId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Dataset entity) {
        if(entity != null) {
            return entity.getMeasureId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Dataset entity) {
        return entity.getMeasureId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
